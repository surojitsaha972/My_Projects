from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
from PyQt5.QtWidgets import QMessageBox
from bookRequestClosed import *
from datetime import date

class Ui_bookReq(object):
    def setupUi(self, bookReq):
        bookReq.setObjectName("bookReq")
        bookReq.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(bookReq)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.sid = QtWidgets.QLineEdit(self.frame_2)
        self.sid.setMaximumSize(QtCore.QSize(100, 30))
        self.sid.setObjectName("sid")
        self.horizontalLayout.addWidget(self.sid)
        self.verticalLayout.addWidget(self.frame_2, 0, QtCore.Qt.AlignHCenter)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_9 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(14)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_2.addWidget(self.label_9)
        self.sub = QtWidgets.QComboBox(self.frame_3)
        self.sub.setMinimumSize(QtCore.QSize(100, 0))
        font = QtGui.QFont()
        font.setFamily("MoolBoran")
        font.setPointSize(16)
        self.sub.setFont(font)
        self.sub.setObjectName("sub")
        self.sub.addItem("")
        self.sub.setItemText(0, "")
        self.horizontalLayout_2.addWidget(self.sub)
        self.verticalLayout.addWidget(self.frame_3, 0, QtCore.Qt.AlignHCenter)
        self.frame_4 = QtWidgets.QFrame(self.centralwidget)
        self.frame_4.setMinimumSize(QtCore.QSize(430, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(16777215, 200))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.table = QtWidgets.QTableWidget(self.frame_4)
        self.table.setObjectName("table")
        self.table.setColumnCount(4)
        self.table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(3, item)
        self.verticalLayout_3.addWidget(self.table)
        self.verticalLayout.addWidget(self.frame_4, 0, QtCore.Qt.AlignHCenter)
        self.frame_5 = QtWidgets.QFrame(self.centralwidget)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.request = QtWidgets.QPushButton(self.frame_5)
        self.request.setObjectName("request")
        self.verticalLayout_4.addWidget(self.request)
        self.verticalLayout.addWidget(self.frame_5, 0, QtCore.Qt.AlignHCenter)
        bookReq.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(bookReq)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        bookReq.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(bookReq)
        self.statusbar.setObjectName("statusbar")
        bookReq.setStatusBar(self.statusbar)

        self.retranslateUi(bookReq)
        QtCore.QMetaObject.connectSlotsByName(bookReq)

        self.request.clicked.connect(self.req)
        self.sub.currentIndexChanged.connect(self.comboIndex)
        self.showBooks()

    def retranslateUi(self, bookReq):
        _translate = QtCore.QCoreApplication.translate
        bookReq.setWindowTitle(_translate("bookReq", "Book request"))
        self.label.setText(_translate("bookReq", "Book request"))
        self.label_2.setText(_translate("bookReq", "Student\'s roll "))
        self.label_9.setText(_translate("bookReq", "Subject Name"))
        item = self.table.horizontalHeaderItem(0)
        item.setText(_translate("bookReq", "BookName"))
        item = self.table.horizontalHeaderItem(1)
        item.setText(_translate("bookReq", "AuthorName"))
        item = self.table.horizontalHeaderItem(2)
        item.setText(_translate("bookReq", "Edition"))
        item = self.table.horizontalHeaderItem(3)
        item.setText(_translate("bookReq", "Stock"))
        self.request.setText(_translate("bookReq", "Request Book"))

    def req(self):
        # curTime = datetime.now().time()
        # closingTime = datetime.strptime("13:30:00", "%H:%M:%S").time()
        # openTime = datetime.strptime("10:00:00", "%H:%M:%S").time()
        
        # if curTime < closingTime and curTime >= openTime:
        dt = date.today()
        roll = self.sid.text().lstrip().rstrip()
        con = sqlite3.connect("projectDB.db")
        cur = con.cursor()
        q = "select count(SID) from issueBook where SID = ? and ReturnDate = ?"
        cur.execute(q,(roll,'NULL'))
        res = cur.fetchall()
        con.commit()
        
        if roll == "":
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Student roll cann't be empty")
            msg.setWindowTitle("Warning")
            msg.show()
            msg.exec_()
        
        elif res[0][0] >= 3:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("You have already taken 3 books")
            msg.setWindowTitle("Warning")
            msg.show()
            msg.exec_()
        else: 
            sn = self.sub.currentText()
            ind = self.table.currentIndex()
            rw = ind.row()
            # print(rw)
            if rw == -1:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Select any book")
                msg.setWindowTitle("Warning")
                msg.show()
                msg.exec_()
                # print(res[0][0])
            else: 
                bn = self.table.item(rw,0).text()
                aut = self.table.item(rw,1).text()
                ed = self.table.item(rw,2).text()
                
                con = sqlite3.connect("projectDB.db")
                cur = con.cursor()
                cur1 = con.cursor()
                cur2 = con.cursor()
                q = "select count(SID) from studentReg where SID = ?"
                cur.execute(q,(roll,))
                res = cur.fetchall()
                
                if res[0][0] == 1:
                    q1 = "insert into bookRequest values (?,?,?,?,?,?)"
                    cur1.execute(q1,(roll,sn,bn,aut,ed,dt))

                    q1 = "update bookStock set Stock = (Stock - 1) where SubjectName = ? and BookName = ? and Edition = ? and AuthorName = ?"
                    cur2.execute(q1,(sn,bn,ed,aut))
                    
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setText("Request sent to the admin")
                    msg.setWindowTitle("Request sent")
                    msg.show()
                    msg.exec_()

                else:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Invalid roll number")
                    msg.setWindowTitle("Enter again")
                    msg.show()
                    msg.exec_()
                con.commit()

        # else:
        #     msg = QMessageBox()
        #     msg.setIcon(QMessageBox.Information)
        #     msg.setText("Book requests are taken between 10:00 AM and 01:30 PM !")
        #     msg.setWindowTitle("Request pannel has closed")
        #     msg.show()
        #     msg.exec_()
            # self.MainWindow = QtWidgets.QMainWindow()
            # self.ui = Ui_MainWindow()
            # self.ui.setupUi(self.MainWindow)
            # self.MainWindow.show()
    
    def showBooks(self):
        bn = self.sub.currentText()
        con = sqlite3.connect("projectDB.db")
        cur = con.cursor()
        q = "select SubjectName from addSubject "
        cur.execute(q,(bn))
        c = cur.fetchall()
        for i in c :
            self.sub.addItem(i[0])

    def comboIndex(self):
        sn = self.sub.currentText()
        # print(bn)
        con = sqlite3.connect("projectDB.db")
        cur = con.cursor()
        q = "select BookName, AuthorName, Edition, Stock from bookStock where SubjectName = ?"
        cur.execute(q,(sn,))
        res = cur.fetchall()
        # print(res)
        self.table.setRowCount(0)
        for i in res:
            rc = self.table.rowCount()
            self.table.insertRow(rc)
            self.table.setItem(rc,0,QtWidgets.QTableWidgetItem(i[0]))
            self.table.setItem(rc,1,QtWidgets.QTableWidgetItem(i[1]))
            self.table.setItem(rc,2,QtWidgets.QTableWidgetItem(str(i[2])))
            self.table.setItem(rc,3,QtWidgets.QTableWidgetItem(str(i[3])))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    bookReq = QtWidgets.QMainWindow()
    ui = Ui_bookReq()
    ui.setupUi(bookReq)
    bookReq.show()
    sys.exit(app.exec_())
