# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pendingRequest.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
from PyQt5.QtWidgets import QMessageBox
from datetime import timedelta,date
from email.message import EmailMessage
import ssl
import smtplib
from emailPass import mailid,password

class Ui_pendingReq(object):
    def setupUi(self, pendingReq):
        pendingReq.setObjectName("pendingReq")
        pendingReq.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(pendingReq)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.verticalLayout.addWidget(self.frame, 0, QtCore.Qt.AlignHCenter)
        self.frame_4 = QtWidgets.QFrame(self.centralwidget)
        self.frame_4.setMinimumSize(QtCore.QSize(550, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(16777215, 200))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.table = QtWidgets.QTableWidget(self.frame_4)
        self.table.setObjectName("table")
        self.table.setColumnCount(5)
        self.table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(4, item)
        self.verticalLayout_3.addWidget(self.table)
        self.verticalLayout.addWidget(self.frame_4, 0, QtCore.Qt.AlignHCenter)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.bookID = QtWidgets.QLineEdit(self.frame_2)
        self.bookID.setObjectName("bookID")
        self.horizontalLayout.addWidget(self.bookID)
        self.verticalLayout.addWidget(self.frame_2, 0, QtCore.Qt.AlignHCenter)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.grant = QtWidgets.QPushButton(self.frame_3)
        self.grant.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.grant.setObjectName("grant")
        self.horizontalLayout_2.addWidget(self.grant)
        self.deny = QtWidgets.QPushButton(self.frame_3)
        self.deny.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.deny.setObjectName("deny")
        self.horizontalLayout_2.addWidget(self.deny)
        self.verticalLayout.addWidget(self.frame_3, 0, QtCore.Qt.AlignHCenter)
        pendingReq.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(pendingReq)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        pendingReq.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(pendingReq)
        self.statusbar.setObjectName("statusbar")
        pendingReq.setStatusBar(self.statusbar)

        self.retranslateUi(pendingReq)
        QtCore.QMetaObject.connectSlotsByName(pendingReq)

        self.grant.clicked.connect(self.grantBook)
        self.deny.clicked.connect(self.denyBook)
        self.showCourse()

    def retranslateUi(self, pendingReq):
        _translate = QtCore.QCoreApplication.translate
        pendingReq.setWindowTitle(_translate("pendingReq", "Pending Issue Request"))
        self.label.setText(_translate("pendingReq", "Approve Book Request"))
        item = self.table.horizontalHeaderItem(0)
        item.setText(_translate("pendingReq", "StudentRoll"))
        item = self.table.horizontalHeaderItem(1)
        item.setText(_translate("pendingReq", "SubjectName"))
        item = self.table.horizontalHeaderItem(2)
        item.setText(_translate("pendingReq", "BookName"))
        item = self.table.horizontalHeaderItem(3)
        item.setText(_translate("pendingReq", "AuthorName"))
        item = self.table.horizontalHeaderItem(4)
        item.setText(_translate("pendingReq", "Edition"))
        self.label_2.setText(_translate("pendingReq", "Accession No"))
        self.grant.setText(_translate("pendingReq", "Grant"))
        self.deny.setText(_translate("pendingReq", "Deny"))

    def showCourse(self):
        con = sqlite3.connect("projectDB.db")
        cur = con.cursor()
        q =  "Select * from bookRequest"
        cur.execute(q)
        res = cur.fetchall()
        self.table.setRowCount(0)
        for i in res:
            # print(i)
            rc = self.table.rowCount()
            self.table.insertRow(rc)
            self.table.setItem(rc,0,QtWidgets.QTableWidgetItem(str(i[0])))
            self.table.setItem(rc,1,QtWidgets.QTableWidgetItem(i[1]))
            self.table.setItem(rc,2,QtWidgets.QTableWidgetItem(i[2]))
            self.table.setItem(rc,3,QtWidgets.QTableWidgetItem(i[3]))
            self.table.setItem(rc,4,QtWidgets.QTableWidgetItem(str(i[4])))

    def grantBook(self):
        ind = self.table.currentIndex()
        rw = ind.row()
        # print(rw)
        
        bID = self.bookID.text().lstrip().rstrip()
        # self.table.removeRow(rw)

        if rw == -1:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Select any book")
            msg.setWindowTitle("Warning")
            msg.show()
            msg.exec_()    
        else:
            
            con = sqlite3.connect("projectDB.db")
            cur = con.cursor()
            q = "select BookID from issueBook where ReturnDate = ?"
            cur.execute(q,("NULL",))
            res = cur.fetchall()
            
            if bID == "":
                # bID = self.bookID.text().lstrip().rstrip()
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                # t = f"Enter {bID}" #+ str(bID)
                msg.setText("Enter book id")
                # msg.setText(t)
                msg.setWindowTitle("Warning")
                msg.show()
                msg.exec_()
            
            elif (bID,) in res: 
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                # t = f"Enter {bID}" #+ str(bID)
                msg.setText("Book id already esixts")
                # msg.setText(t)
                msg.setWindowTitle("Warning")
                msg.show()
                msg.exec_()
            else:

                roll = self.table.item(rw,0).text()
                sn = self.table.item(rw,1).text()
                bn = self.table.item(rw,2).text()
                an = self.table.item(rw,3).text()
                ed = self.table.item(rw,4).text()
                
                dt = date.today()
                a14 = dt + timedelta(days=14)
              
                cur = con.cursor()
                q = "insert into issueBook values(?,?,?,?,?,?,?,?,'NULL','NULL',?)"
                cur.execute(q,(bID,roll,sn,bn,an,ed,dt,a14,0))
                
                cur1 = con.cursor()
                q2 = "delete from bookRequest where SID = ?"
                cur1.execute(q2,(roll,))
                con.commit()
                
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("Book issued")
                msg.setWindowTitle("Book issued")
                # msg.setWindowTitle("Book issued, collect the book within 5 PM otherwise your request has canceled")
                msg.show()
                msg.exec_()
                self.table.removeRow(rw)
                self.bookID.setText(" ")

                cur = con.cursor()
                q = "select Email, Name from studentReg where SID = ?"
                cur.execute(q,(roll,))
                res = cur.fetchall()
                # print(res[0][0])

                receiver = res[0][0]
                name = res[0][1]
                sub = "Book issued"
                body = f"Dear {name},\n\nYour request for the book : {bn}, edition: {ed}, author name: {an}, book id: {bID} has been issued.\n\n Return the book before {a14}"
                
                em = EmailMessage()
                em['From'] = mailid
                em['To'] = receiver
                em['subject'] = sub
                em.set_content(body)

                context = ssl.create_default_context()
                with smtplib.SMTP_SSL('smtp.gmail.com', 465, context= context) as smtp:
                    smtp.login(mailid,password)
                    smtp.sendmail(mailid, receiver, em.as_string())

    
    def denyBook(self):
        ind = self.table.currentIndex()
        rw = ind.row()
        # print(rw)
        if rw == -1:
            # pass
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Select any book")
            msg.setWindowTitle("Warning")
            msg.show()
            msg.exec_()
        else:
            roll = self.table.item(rw,0).text()
            sn = self.table.item(rw,1).text()
            bn = self.table.item(rw,2).text()
            an = self.table.item(rw,3).text()
            ed = self.table.item(rw,4).text()
            # print(sn,bn,an,ed)
            con = sqlite3.connect("projectDB.db")
            cur = con.cursor()
            q1 = "update bookStock set Stock = (Stock + 1) where SubjectName = ? and BookName = ? and Edition = ? and AuthorName = ?"
            cur.execute(q1,(sn,bn,ed,an))

            cur1 = con.cursor()
            q2 = "delete from bookRequest where SID = ?"
            cur1.execute(q2,(roll,))
            self.table.removeRow(rw)

            con.commit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    pendingReq = QtWidgets.QMainWindow()
    ui = Ui_pendingReq()
    ui.setupUi(pendingReq)
    pendingReq.show()
    sys.exit(app.exec_())
